import argparse
import logging
import pefile
# Reference https://github.com/erocarrera/pefile
import sys

# Constants
E_MAGIC = b"\x4d\x5a"

def validateInputFile(x):
    """
    Validates the input file.
    """
    try:
        # Attempt to open the file
        with open(x, 'rb') as fileHandle:

            # Attempt to read the first 4 bytes of the file
            e_magic = fileHandle.read(len(E_MAGIC))
            logging.debug("e_magic: {}".format(e_magic))

            # Validate that emagic
            if E_MAGIC != e_magic:
                logging.error("Input File \'{}\' is not a PE File.".format(x))
                sys.exit(1)
        return x
    except Exception:
        logging.error("Input File \'{}\' does not exist. Valid: path to \'<file>.exe\'".format(x))
        sys.exit(1)

#TODO: Add support for decimal input
def validateVirtualAddress(x):
    """
    Validates the target virtual address.
    """
    try:
        # Attempt to convert the input string to an int
        return int(x, 16)
    except:
        logging.error("Target Virtual Address \'{}\' is invalid. Valid: \'0x##\ (hexadecimal) or \'##\' (decimal)".format(x))
        sys.exit(1)

def main ():
    """
    This file implements the vapid assignment outlined at https://github.com/hawkinsw/CS5138/tree/main/Assignment1.
    """
    # Build arg parser
    parser = argparse.ArgumentParser(description='%(prog)s is a Virtual Address Pointer In Disk (vapid) python tool for\
        32-bit PE files.', usage='python3 ./%(prog)s <32-bit PE File> <Target Virtual Address>')
    parser.add_argument('input_file', type=str, metavar='<Input File>', help='The name/path of a 32-bit PE File')
    parser.add_argument('target_virtual_address', type=str, metavar='<Target Virtual Address>',
        help='The target virtual address')
    args = parser.parse_args()

    # Setup Log
    logging.basicConfig(level=logging.DEBUG, format='%(levelname)s: %(message)s')

    # Validate Arguments
    # pe_file = validateInputFile(args.input_file)
    peFile = validateInputFile(args.input_file)
    targetVirtualAddress = validateVirtualAddress(args.target_virtual_address)

    # Create a pe file object using the pefile python library
    peFileHandle = pefile.PE(peFile)
    logging.debug(peFileHandle.DOS_HEADER)

    # Exit
    sys.exit(0)

if __name__ == "__main__":
    main()